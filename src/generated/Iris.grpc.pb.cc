// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Iris.proto

#include "Iris.pb.h"
#include "Iris.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace Iris {

static const char* TestService_method_names[] = {
  "/Iris.TestService/PutMessage",
  "/Iris.TestService/GetMessage",
  "/Iris.TestService/SetNetworkParameters",
};

std::unique_ptr< TestService::Stub> TestService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TestService::Stub> stub(new TestService::Stub(channel, options));
  return stub;
}

TestService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_PutMessage_(TestService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMessage_(TestService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetNetworkParameters_(TestService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status TestService::Stub::PutMessage(::grpc::ClientContext* context, const ::Iris::DataBuffer& request, ::Iris::StatusCode* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Iris::DataBuffer, ::Iris::StatusCode, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PutMessage_, context, request, response);
}

void TestService::Stub::async::PutMessage(::grpc::ClientContext* context, const ::Iris::DataBuffer* request, ::Iris::StatusCode* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Iris::DataBuffer, ::Iris::StatusCode, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PutMessage_, context, request, response, std::move(f));
}

void TestService::Stub::async::PutMessage(::grpc::ClientContext* context, const ::Iris::DataBuffer* request, ::Iris::StatusCode* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PutMessage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Iris::StatusCode>* TestService::Stub::PrepareAsyncPutMessageRaw(::grpc::ClientContext* context, const ::Iris::DataBuffer& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Iris::StatusCode, ::Iris::DataBuffer, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PutMessage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Iris::StatusCode>* TestService::Stub::AsyncPutMessageRaw(::grpc::ClientContext* context, const ::Iris::DataBuffer& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPutMessageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TestService::Stub::GetMessage(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::Iris::DataBuffer* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::Iris::DataBuffer, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMessage_, context, request, response);
}

void TestService::Stub::async::GetMessage(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Iris::DataBuffer* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::Iris::DataBuffer, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMessage_, context, request, response, std::move(f));
}

void TestService::Stub::async::GetMessage(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Iris::DataBuffer* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMessage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Iris::DataBuffer>* TestService::Stub::PrepareAsyncGetMessageRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Iris::DataBuffer, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMessage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Iris::DataBuffer>* TestService::Stub::AsyncGetMessageRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMessageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TestService::Stub::SetNetworkParameters(::grpc::ClientContext* context, const ::Iris::NetworkParameters& request, ::Iris::StatusCode* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Iris::NetworkParameters, ::Iris::StatusCode, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetNetworkParameters_, context, request, response);
}

void TestService::Stub::async::SetNetworkParameters(::grpc::ClientContext* context, const ::Iris::NetworkParameters* request, ::Iris::StatusCode* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Iris::NetworkParameters, ::Iris::StatusCode, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetNetworkParameters_, context, request, response, std::move(f));
}

void TestService::Stub::async::SetNetworkParameters(::grpc::ClientContext* context, const ::Iris::NetworkParameters* request, ::Iris::StatusCode* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetNetworkParameters_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Iris::StatusCode>* TestService::Stub::PrepareAsyncSetNetworkParametersRaw(::grpc::ClientContext* context, const ::Iris::NetworkParameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Iris::StatusCode, ::Iris::NetworkParameters, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetNetworkParameters_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Iris::StatusCode>* TestService::Stub::AsyncSetNetworkParametersRaw(::grpc::ClientContext* context, const ::Iris::NetworkParameters& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetNetworkParametersRaw(context, request, cq);
  result->StartCall();
  return result;
}

TestService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TestService::Service, ::Iris::DataBuffer, ::Iris::StatusCode, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TestService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Iris::DataBuffer* req,
             ::Iris::StatusCode* resp) {
               return service->PutMessage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TestService::Service, ::google::protobuf::Empty, ::Iris::DataBuffer, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TestService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::Iris::DataBuffer* resp) {
               return service->GetMessage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TestService::Service, ::Iris::NetworkParameters, ::Iris::StatusCode, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TestService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Iris::NetworkParameters* req,
             ::Iris::StatusCode* resp) {
               return service->SetNetworkParameters(ctx, req, resp);
             }, this)));
}

TestService::Service::~Service() {
}

::grpc::Status TestService::Service::PutMessage(::grpc::ServerContext* context, const ::Iris::DataBuffer* request, ::Iris::StatusCode* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TestService::Service::GetMessage(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::Iris::DataBuffer* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TestService::Service::SetNetworkParameters(::grpc::ServerContext* context, const ::Iris::NetworkParameters* request, ::Iris::StatusCode* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* NetPipe_method_names[] = {
  "/Iris.NetPipe/PutMessage",
};

std::unique_ptr< NetPipe::Stub> NetPipe::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< NetPipe::Stub> stub(new NetPipe::Stub(channel, options));
  return stub;
}

NetPipe::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_PutMessage_(NetPipe_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status NetPipe::Stub::PutMessage(::grpc::ClientContext* context, const ::Iris::DataBuffer& request, ::Iris::StatusCode* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Iris::DataBuffer, ::Iris::StatusCode, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PutMessage_, context, request, response);
}

void NetPipe::Stub::async::PutMessage(::grpc::ClientContext* context, const ::Iris::DataBuffer* request, ::Iris::StatusCode* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Iris::DataBuffer, ::Iris::StatusCode, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PutMessage_, context, request, response, std::move(f));
}

void NetPipe::Stub::async::PutMessage(::grpc::ClientContext* context, const ::Iris::DataBuffer* request, ::Iris::StatusCode* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PutMessage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Iris::StatusCode>* NetPipe::Stub::PrepareAsyncPutMessageRaw(::grpc::ClientContext* context, const ::Iris::DataBuffer& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Iris::StatusCode, ::Iris::DataBuffer, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PutMessage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Iris::StatusCode>* NetPipe::Stub::AsyncPutMessageRaw(::grpc::ClientContext* context, const ::Iris::DataBuffer& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPutMessageRaw(context, request, cq);
  result->StartCall();
  return result;
}

NetPipe::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NetPipe_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NetPipe::Service, ::Iris::DataBuffer, ::Iris::StatusCode, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NetPipe::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Iris::DataBuffer* req,
             ::Iris::StatusCode* resp) {
               return service->PutMessage(ctx, req, resp);
             }, this)));
}

NetPipe::Service::~Service() {
}

::grpc::Status NetPipe::Service::PutMessage(::grpc::ServerContext* context, const ::Iris::DataBuffer* request, ::Iris::StatusCode* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace Iris

